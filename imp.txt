*** Try not to include upgrades *** -->> It sometimes question decentralisation

-->> PROXIES : 

-->> Storage is stored in proxy not the implementation
*** Proxies dont use the constructor.
-->> Proxy -> deploy implementation -> call some "initializer" function.
-->> Proxy (borrowing function) => implementation

** Delegate call : we can use this to borrow a function from one contract to another contract

The way it functions is that we know that storage variables are stored in index format so if we use delegatecall if assigns the vlaue to the variables on the babsis of that indexing.
-->> if even dont have variables it still stores it. ** the variables need not to be of same type as it just updates the storage location according to its index.
 Eg: // SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

contract B{
    uint public num;
    address public sender;
    uint public value;

    function setVars(uint _num) public payable {
        num = _num;
        sender = msg.sender;
        value = msg.value;
    }
}

contract A{
    uint public num;
    address public sender;
    uint public value;

    function setVars(address _contract , uint _num) public payable {
       (bool success , bytes memory data) = _contract.delegatecall(
        abi.encodeWithSignature("setVars(uint256)", _num)
       );
    }
}

**** UUPS proxies are one in which we can remove the upgradability.